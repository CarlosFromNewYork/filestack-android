
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'
        classpath 'com.google.gms:google-services:3.0.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'

    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

dependencies {
    compile 'de.greenrobot:eventbus:2.4.0'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.picasso:picasso:2.5.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'
    compile "com.android.support:recyclerview-v7:25.3.1"
    compile 'com.google.android.gms:play-services-auth:10.2.4'
    compile 'pub.devrel:easypermissions:0.2.1'

    compile('com.google.api-client:google-api-client-android:1.22.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    compile('com.google.apis:google-api-services-drive:v3-rev69-1.22.0') {
        exclude group: 'org.apache.httpcomponents'
    }

    compile('com.google.apis:google-api-services-gmail:v1-rev64-1.22.0') {
        exclude group: 'org.apache.httpcomponents'
    }
}

configurations {
    all*.exclude group: 'com.google.firebase', module: 'firebase-core'
    all*.exclude group: 'com.google.firebase', module: 'firebase-iid'
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'
    group group

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionName project.version
        versionCode Integer.parseInt(project.versionCode)
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        androidTest.setRoot('tests')
    }

    lintOptions {
        abortOnError false
    }
}

allprojects {
    version = version
    group = group

    repositories {
        jcenter()
    }
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

install {
    repositories.mavenInstaller {
        pom.project {
            name project.name
            description project.desc
            url project.siteUrl

            packaging 'aar'
            groupId project.group
            artifactId project.name
            version project.version

            licenses {
                license {
                    name 'Apache-2.0'
                    url 'https://opensource.org/licenses/apache2.0.php'
                }
            }
            scm {
                connection project.gitUrl
                url project.siteUrl

            }
            developers {
                developer {
                    id = 'filestack'
                    name 'Filestack'
                }
            }
        }
    }
}


bintray {
    user = project.hasProperty('bintrayUser') ? project.bintrayUser : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayKey') ? project.bintrayKey : System.getenv('BINTRAY_KEY')
    configurations = ['archives']
    pkg {
        userOrg = 'filestack'
        repo = 'maven'
        name = project.name
        desc = project.desc
        licenses = ['Apache-2.0']
        websiteUrl = project.siteUrl
        issueTrackerUrl = project.gitUrl + '/issues'
        vcsUrl = project.gitUrl
        publish = true
        version {
            name = project.version
            desc = project.desc
            released = new Date()
            vcsTag = project.version
        }
    }
}


def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}
